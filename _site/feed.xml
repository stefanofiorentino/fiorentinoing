<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-04T17:49:25+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Fiorentino Ing. Stefano</title><subtitle>Modern C++ · Yocto Project · Wi-Fi · BLE · Co-Founder at Italian Embedded · Organizer at C++ User Group Lugano</subtitle><entry><title type="html">Talk about a topic for 30 minutes</title><link href="http://localhost:4000/meetup/cpp/2022/11/04/30-min-talk.html" rel="alternate" type="text/html" title="Talk about a topic for 30 minutes" /><published>2022-11-04T06:00:00+01:00</published><updated>2022-11-04T06:00:00+01:00</updated><id>http://localhost:4000/meetup/cpp/2022/11/04/30-min-talk</id><content type="html" xml:base="http://localhost:4000/meetup/cpp/2022/11/04/30-min-talk.html">&lt;p&gt;“If you can’t talk about a topic for 30 minutes, unprepared, you probably don’t know enough to sell a course”. &lt;a href=&quot;https://www.linkedin.com/in/justinwelsh/&quot;&gt;Justin Welsh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;#meetup #cpp #usergroup #lugano&lt;/p&gt;</content><author><name></name></author><category term="meetup" /><category term="cpp" /><summary type="html">“If you can’t talk about a topic for 30 minutes, unprepared, you probably don’t know enough to sell a course”. Justin Welsh</summary></entry><entry><title type="html">automatically (clang-)formatting</title><link href="http://localhost:4000/modern/cpp/continuousintegration/2022/11/03/automatically-clang-format.html" rel="alternate" type="text/html" title="automatically (clang-)formatting" /><published>2022-11-03T06:00:00+01:00</published><updated>2022-11-03T06:00:00+01:00</updated><id>http://localhost:4000/modern/cpp/continuousintegration/2022/11/03/automatically-clang-format</id><content type="html" xml:base="http://localhost:4000/modern/cpp/continuousintegration/2022/11/03/automatically-clang-format.html">&lt;p&gt;In the past, I got several header files broken by automatically (clang-)formatting, so if I format the code, I currently assure myself to rebuild and run tests before checking code in.&lt;/p&gt;

&lt;p&gt;#cpp #software #continuousintegration&lt;/p&gt;</content><author><name></name></author><category term="modern" /><category term="cpp" /><category term="continuousintegration" /><summary type="html">In the past, I got several header files broken by automatically (clang-)formatting, so if I format the code, I currently assure myself to rebuild and run tests before checking code in.</summary></entry><entry><title type="html">1yr organizer</title><link href="http://localhost:4000/meetup/cpp/2022/11/02/1yr-organizer.html" rel="alternate" type="text/html" title="1yr organizer" /><published>2022-11-02T06:00:00+01:00</published><updated>2022-11-02T06:00:00+01:00</updated><id>http://localhost:4000/meetup/cpp/2022/11/02/1yr-organizer</id><content type="html" xml:base="http://localhost:4000/meetup/cpp/2022/11/02/1yr-organizer.html">&lt;p&gt;Check it out! I’m celebrating my 1 year anniversary as an organizer on @meetup!&lt;br /&gt;
&lt;img src=&quot;https://tinyurl.com/rekcuwuf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;#meetup #cpp #usergroup #lugano&lt;/p&gt;</content><author><name></name></author><category term="meetup" /><category term="cpp" /><summary type="html">Check it out! I’m celebrating my 1 year anniversary as an organizer on @meetup!</summary></entry><entry><title type="html">CoffeeScript is not that bad</title><link href="http://localhost:4000/javascript/2022/10/28/coffeescript.html" rel="alternate" type="text/html" title="CoffeeScript is not that bad" /><published>2022-10-28T07:00:00+02:00</published><updated>2022-10-28T07:00:00+02:00</updated><id>http://localhost:4000/javascript/2022/10/28/coffeescript</id><content type="html" xml:base="http://localhost:4000/javascript/2022/10/28/coffeescript.html">&lt;p&gt;Back in 2014, I had the chance to investigate a little bit the CoffeeScript language. You know what? I just met it again after years thanks to learnxinyminutes.com and here is a good example of why coffeescript (and other languages like TypeScript) should be used instead of plain vanilla Javascript (maybe if you’re not experienced enough).&lt;/p&gt;

&lt;p&gt;Existence test like:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alert &quot;I knew it!&quot; if elvis?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;becomes (transpiled):&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if(typeof elvis !== &quot;undefined&quot; &amp;amp;&amp;amp; elvis !== null) { alert(&quot;I knew it!&quot;); }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;#javascript #languages #computerscience&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><summary type="html">Back in 2014, I had the chance to investigate a little bit the CoffeeScript language. You know what? I just met it again after years thanks to learnxinyminutes.com and here is a good example of why coffeescript (and other languages like TypeScript) should be used instead of plain vanilla Javascript (maybe if you’re not experienced enough).</summary></entry><entry><title type="html">It’s too late</title><link href="http://localhost:4000/modern/cpp/2022/10/21/quest.html" rel="alternate" type="text/html" title="It’s too late" /><published>2022-10-21T07:00:00+02:00</published><updated>2022-10-21T07:00:00+02:00</updated><id>http://localhost:4000/modern/cpp/2022/10/21/quest</id><content type="html" xml:base="http://localhost:4000/modern/cpp/2022/10/21/quest.html">&lt;p&gt;If you are in the quest for a good debugging tool, it’s too late.
Test earlier, test hard.
Fail soon, fail better.&lt;/p&gt;

&lt;p&gt;#cpp #software #continuousintegration&lt;/p&gt;</content><author><name></name></author><category term="modern" /><category term="cpp" /><summary type="html">If you are in the quest for a good debugging tool, it’s too late. Test earlier, test hard. Fail soon, fail better.</summary></entry><entry><title type="html">You can peacefully release even if in C++</title><link href="http://localhost:4000/cpp/software/testing/trunkbaseddevelopment/continuousintegration/2022/09/29/sanitizers.html" rel="alternate" type="text/html" title="You can peacefully release even if in C++" /><published>2022-09-29T07:00:00+02:00</published><updated>2022-09-29T07:00:00+02:00</updated><id>http://localhost:4000/cpp/software/testing/trunkbaseddevelopment/continuousintegration/2022/09/29/sanitizers</id><content type="html" xml:base="http://localhost:4000/cpp/software/testing/trunkbaseddevelopment/continuousintegration/2022/09/29/sanitizers.html">&lt;p&gt;after a passage of the linter, cppcheck, clang-tidy, flawfinder and having launched the test suite with UBSan, ASan and THSan, you can peacefully release your artifact even if in C++ 😂&lt;/p&gt;

&lt;p&gt;#cpp #software #trunkbaseddevelopment #continuousintegration&lt;/p&gt;</content><author><name></name></author><category term="cpp" /><category term="software" /><category term="testing" /><category term="trunkbaseddevelopment" /><category term="continuousintegration" /><summary type="html">after a passage of the linter, cppcheck, clang-tidy, flawfinder and having launched the test suite with UBSan, ASan and THSan, you can peacefully release your artifact even if in C++ 😂</summary></entry><entry><title type="html">Serial added value over Parallel WIPs</title><link href="http://localhost:4000/modern/cpp/testing/2022/09/21/mob-1.html" rel="alternate" type="text/html" title="Serial added value over Parallel WIPs" /><published>2022-09-21T07:00:00+02:00</published><updated>2022-09-21T07:00:00+02:00</updated><id>http://localhost:4000/modern/cpp/testing/2022/09/21/mob-1</id><content type="html" xml:base="http://localhost:4000/modern/cpp/testing/2022/09/21/mob-1.html">&lt;p&gt;I’m lately experiencing the serial review and merge to trunk.&lt;/p&gt;

&lt;p&gt;Serially addition of value over parallel conflicting WIPs.&lt;/p&gt;

&lt;p&gt;So, we’re currently pairing and even mobbing to get PRs rebased, reviewed, approved and merged together at once.&lt;/p&gt;

&lt;p&gt;I know there is a flaw in doing this because maybe we started too late, but as we had several independent work in progress, outcomes are already showing this is the right way to go.&lt;/p&gt;

&lt;p&gt;In the near future, we’ll experiment this setup during the whole software development process.&lt;/p&gt;

&lt;p&gt;#cpp #software #trunkbaseddevelopment #continuousintegration&lt;/p&gt;</content><author><name></name></author><category term="modern" /><category term="cpp" /><category term="testing" /><summary type="html">I’m lately experiencing the serial review and merge to trunk.</summary></entry><entry><title type="html">Safely remove uncovered code</title><link href="http://localhost:4000/modern/cpp/testing/2022/09/10/safely-remove-uncovered-code.html" rel="alternate" type="text/html" title="Safely remove uncovered code" /><published>2022-09-10T18:00:00+02:00</published><updated>2022-09-10T18:00:00+02:00</updated><id>http://localhost:4000/modern/cpp/testing/2022/09/10/safely-remove-uncovered-code</id><content type="html" xml:base="http://localhost:4000/modern/cpp/testing/2022/09/10/safely-remove-uncovered-code.html">&lt;p&gt;What if part of your codebase cannot be covered by tests?&lt;/p&gt;

&lt;p&gt;If a line of code is not reachable by testing the public APIs of your system or library, chances are you didn’t apply test-driven development well (or at all).&lt;/p&gt;

&lt;p&gt;Do yourself a favour and (safely) remove the code.&lt;/p&gt;

&lt;p&gt;Clarification: by “cannot be covered” I don’t mean “is not covered”.&lt;/p&gt;

&lt;p&gt;#cpp #software #continuousintegration&lt;/p&gt;</content><author><name></name></author><category term="modern" /><category term="cpp" /><category term="testing" /><summary type="html">What if part of your codebase cannot be covered by tests?</summary></entry><entry><title type="html">Push switch-cases at the edge.</title><link href="http://localhost:4000/modern/cpp/2022/09/08/switch-case.html" rel="alternate" type="text/html" title="Push switch-cases at the edge." /><published>2022-09-08T07:00:00+02:00</published><updated>2022-09-08T07:00:00+02:00</updated><id>http://localhost:4000/modern/cpp/2022/09/08/switch-case</id><content type="html" xml:base="http://localhost:4000/modern/cpp/2022/09/08/switch-case.html">&lt;p&gt;The only place where conditionals can be accepted is at the edge of your application, 
everywhere else polymorphism is the way to go.&lt;/p&gt;

&lt;p&gt;Whenever you find a conditional in your code, you can replace it with a polymorphic action.
You can do it by pushing to the edge of your application this conditional, i.e., the selection of the action to be performed. Chances are you can reuse this same (brand-new) action again and again in other places.&lt;/p&gt;

&lt;p&gt;This video is where I started thinking about this: https://youtube.com/watch?v=os6ssw1qylU&amp;amp;feature=share&lt;/p&gt;

&lt;p&gt;#polymorphism #software #continuousintegration&lt;/p&gt;</content><author><name></name></author><category term="modern" /><category term="cpp" /><summary type="html">The only place where conditionals can be accepted is at the edge of your application, everywhere else polymorphism is the way to go.</summary></entry><entry><title type="html">It’s neither about TDD or BDD.</title><link href="http://localhost:4000/modern/cpp/2022/09/06/not-tdd-vs-bdd.html" rel="alternate" type="text/html" title="It’s neither about TDD or BDD." /><published>2022-09-06T07:00:00+02:00</published><updated>2022-09-06T07:00:00+02:00</updated><id>http://localhost:4000/modern/cpp/2022/09/06/not-tdd-vs-bdd</id><content type="html" xml:base="http://localhost:4000/modern/cpp/2022/09/06/not-tdd-vs-bdd.html">&lt;p&gt;It’s neither about TDD or BDD. And we are not talking about specific paradigm (e.g., OOP vs functional). I guess we agree we need to assert contracts and not implementation details.&lt;/p&gt;

&lt;p&gt;By contract I mean the set of public APIs of your code.&lt;/p&gt;

&lt;p&gt;It’s not about classes. If you have a C file with 2 functions exposed by its header and all other functions being “private” to the translation unit, you need to test only these 2 “publicly exposed” functions.&lt;/p&gt;

&lt;p&gt;If any line of code is not reachable from the public APIs, chances are you didn’t apply TDD well (or at all).&lt;/p&gt;</content><author><name></name></author><category term="modern" /><category term="cpp" /><summary type="html">It’s neither about TDD or BDD. And we are not talking about specific paradigm (e.g., OOP vs functional). I guess we agree we need to assert contracts and not implementation details.</summary></entry></feed>